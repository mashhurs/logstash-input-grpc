// import com.google.protobuf.gradle.*
// com.google.protobuf:protobuf-gradle-plugin:0.8.0.
import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.9.4"
    }
}

plugins {
  id 'java'
  id 'idea'
  id 'maven-publish'  
}

apply plugin: "com.google.protobuf"

group 'org.logstash.plugins.input.grpc'
version rootProject.file('VERSION').text.trim()

description = "gRPC Input implementation"

String log4jVersion = '2.17.1'
String junitVersion = '5.9.2'

var grpcVersion = "1.68.0" // CURRENT_GRPC_VERSION
var protobufVersion = "4.28.2"

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    compileOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}" // provided by Logstash

    runtimeOnly ("io.grpc:grpc-netty-shaded:${grpcVersion}")
    implementation ("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation ("io.grpc:grpc-services:${grpcVersion}")
    implementation ("io.grpc:grpc-stub:${grpcVersion}")
    implementation ("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    implementation ("io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:1.32.0-alpha")
    implementation ("com.google.guava:guava:33.3.1-jre")

    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk:1.42.1")
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin:1.42.1")
    implementation("io.opentelemetry.instrumentation:opentelemetry-grpc-1.6")

    //alpha modules
    implementation("io.opentelemetry.semconv:opentelemetry-semconv")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-grpc_jars.rb')
            jars_file.newWriter().withWriter { w ->
                w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
                    w << "require \'jar_dependencies\'\n"
                    configurations.runtimeClasspath.allDependencies.each {
                        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
                    }
                w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
            }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
            configurations.runtimeClasspath.allDependencies.each { dep ->
                File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
                    String groupPath = dep.group.replaceAll('\\.', '/')
                    File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
                    newJarFile.mkdirs()
                    Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
            }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
            File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
            projectJarFile.mkdirs()
            Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
//    plugins {
//        id("grpc") {
//            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
//        }
//    }
//    generateProtoTasks {
//        all().configureEach {
//            plugins {
//                id("grpc")
//            }
//        }
//    }
}
